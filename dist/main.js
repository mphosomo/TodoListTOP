(()=>{"use strict";var __webpack_modules__={208:(module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `:root {\n\t--bg-color: #ffffff;\n\t--bg-color-secondary: #fafafa;\n\t--bg-color-accent: #e7e7e7;\n\t--text-color: #000000;\n\n\t--filter: invert(0%) sepia(8%) saturate(7469%) hue-rotate(355deg)\n\t\tbrightness(90%) contrast(110%);\n\n\t--font: sans-serif, 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\n\t\t'Lucida Sans Unicode', Geneva, Verdana;\n\n\t--sidebar-width: 300px;\n}\n\n.dark-theme {\n\t--bg-color: #1e1d1f;\n\t--bg-color-secondary: #292929;\n\t--bg-color-accent: #383838;\n\t--text-color: #ffffff;\n\n\t--filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(288deg)\n\t\tbrightness(102%) contrast(102%);\n}\n\n::-webkit-scrollbar {\n\twidth: 5px;\n}\n\n::-webkit-scrollbar-track {\n\tbackground: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n\tbackground: #888;\n}\n\n::-webkit-scrollbar-thumb:hover {\n\tbackground: #555;\n\tcursor: pointer;\n}\n\n* {\n\tmargin: 0;\n\tpadding: 0;\n\tbox-sizing: border-box;\n}\n\nbody {\n\tcolor: var(--text-color);\n\tfont-size: 1rem;\n\tfont-family: sans-serif, 'Lucida Sans', 'Lucida Sans Regular',\n\t\t'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n\tfont-weight: normal;\n\n\ttransition: color 500ms ease-in-out;\n}\n\nh1 {\n\tfont-size: 2rem;\n}\n\nbutton {\n\tcursor: pointer;\n\tpadding: 5px;\n\tcolor: var(--text-color);\n\tfont-family: var(--font);\n\tborder: 1px solid var(--text-color);\n\tborder-radius: 5px;\n\ttransition: background-color 100ms ease-in-out;\n}\n\n.breaker {\n\tbackground-color: var(--text-color);\n\topacity: 30%;\n\twidth: auto;\n\theight: 2px;\n\tmargin: 10px 0;\n}\n\n.seperator {\n\tborder: 1px solid var(--text-color);\n\twidth: 5px;\n\tmargin: 0 10px;\n}\n\n.container {\n\theight: 100vh;\n\twidth: 100%;\n\tdisplay: grid;\n\tgrid-template-areas:\n\t\t'sidebar content'\n\t\t'sidebar content';\n\tgrid-template-columns: 1fr 4fr;\n\tbackground-color: var(--bg-color);\n}\n\n.container .content #sidebar-collapse {\n\tdisplay: none;\n}\n\n.container.expand-content {\n\tgrid-template-areas: 'content';\n\tgrid-template-columns: 1fr;\n}\n\n.container.expand-content #sidebar-collapse {\n\tdisplay: flex;\n}\n\n.sidebar {\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n\tgrid-area: sidebar;\n\theight: auto;\n\twidth: var(--sidebar-width);\n\tpadding: 5px;\n\tmargin: 5px;\n\tborder: none;\n\tborder-radius: 10px;\n\tbackground-color: var(--bg-color-secondary);\n\toverflow: hidden;\n}\n\n.sidebar.collapse {\n\tdisplay: none;\n}\n\n.sidebar .top {\n\tpadding: 10px;\n\toverflow: hidden;\n}\n\n.sidebar .top .heading {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n}\n\n.sidebar .top .heading button {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tbackground-color: transparent;\n\tborder: none;\n\tborder-radius: 5px;\n}\n\n.sidebar .top .heading button:hover {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.sidebar .top .heading img {\n\theight: 30px;\n}\n\n.sidebar .top .projects {\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\toverflow: auto;\n\tscrollbar-width: 5px;\n\tmax-height: 100%;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 5px;\n\tmax-width: auto;\n\tflex: 1;\n}\n\n.sidebar .top .projects .project-container {\n\tmax-width: auto;\n\tpadding: 15px 10px;\n\tmargin-bottom: 10px;\n\tmargin-right: 5px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: center;\n\tgap: 0.5rem;\n\tbackground-color: var(--bg-color-secondary);\n\tborder-radius: 10px;\n\tcursor: pointer;\n}\n\n.sidebar .top .projects .project-container:has(button:hover) {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.sidebar .top .projects .project-container.active {\n\tfont-weight: bold;\n\tbackground-color: var(--bg-color-accent);\n}\n\n.sidebar .top .projects .project-container .project-icon {\n\theight: 20px;\n}\n\n.sidebar .top .projects .project-container .left {\n\twidth: 100%;\n}\n\n.sidebar .top .projects .project-container .left p {\n\tmax-width: 100%;\n\tdisplay: -webkit-box;\n\t-webkit-line-clamp: 1;\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;\n}\n\n.sidebar .top .projects .project-container .right {\n\tdisplay: flex;\n\tflex-direction: row;\n\tgap: 5px;\n}\n\n.sidebar .top .projects .project-container .right #edit-project,\n.sidebar .top .projects .project-container .right #delete-project {\n\tbackground-color: transparent;\n\tborder: none;\n}\n\n.sidebar .top .projects .project-container .right img {\n\theight: 20px;\n}\n\n.sidebar .top .projects .project-container .right #edit-project {\n\ttransition: all 100ms ease-in-out;\n}\n\n.sidebar .top .projects .project-container .right #edit-project:hover {\n\tbackground-color: var(--bg-color-secondary);\n}\n\n.sidebar .top .projects .project-container .right #delete-project {\n\ttransition: all 100ms ease-in-out;\n}\n\n.sidebar .top .projects .project-container .right #delete-project:hover {\n\tbackground-color: var(--bg-color-secondary);\n}\n\n.sidebar .bottom {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: flex-end;\n}\n\n.sidebar .bottom button {\n\tbackground-color: var(--bg-color);\n\tpadding: 10px 20px;\n\ttransition: all 100ms ease-in-out;\n\tmargin-top: 20px;\n}\n\n.sidebar .bottom button:hover {\n\tbackground-color: var(--bg-color-accent);\n\tcolor: var(--text-color);\n\tscale: 1.1;\n}\n\n.modal-container {\n\topacity: 0;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tpointer-events: none;\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tbackground-color: rgba(0, 0, 0, 0.7);\n\ttransition: opacity 0.3s ease;\n}\n\n.modal-container.active {\n\topacity: 100%;\n\tpointer-events: all;\n}\n\n/* Create project modal */\n\n.modal-container .create-project-modal {\n\tdisplay: none;\n\tbackground-color: var(--bg-color);\n\tpadding: 10px;\n\tz-index: 10;\n\tborder: none;\n\tborder-radius: 10px;\n\tpointer-events: none;\n}\n\n.modal-container .create-project-modal.active {\n\tdisplay: flex;\n\tflex-direction: column;\n\topacity: 100%;\n\tpointer-events: all;\n}\n\n.modal-container .create-project-modal .top {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tgap: 10rem;\n}\n\n.modal-container .create-project-modal .top button {\n\tborder: none;\n\ttext-align: center;\n\tcolor: var(--text-color);\n\tfont-weight: bold;\n\tbackground-color: transparent;\n\tfont-size: 100%;\n}\n\n.modal-container .create-project-modal .bottom .project-details {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\theight: 100%;\n}\n\n.modal-container .create-project-modal .bottom .project-details label {\n\tmargin-bottom: 5px;\n\tfont-weight: bold;\n}\n\n.modal-container .create-project-modal .bottom .project-details input {\n\toutline: none;\n\tborder: 1px solid var(--text-color);\n\tborder-radius: 5px;\n\tpadding: 10px;\n\tmargin-bottom: 10px;\n}\n\n.modal-container .create-project-modal .bottom .project-details button {\n\tpadding: 10px;\n\tfont-weight: bold;\n\tcolor: var(--text-color);\n\tbackground-color: transparent;\n\ttransition: color 0.3s ease-in-out;\n}\n\n.modal-container .create-project-modal .bottom .project-details button:hover {\n\tbackground-color: var(--bg-color-secondary);\n}\n\n/* Create task modal */\n\n.modal-container .create-task-modal {\n\tdisplay: none;\n\tbackground-color: var(--bg-color);\n\tpadding: 10px;\n\tz-index: 10;\n\tborder: none;\n\tborder-radius: 10px;\n\tpointer-events: none;\n}\n\n.modal-container .create-task-modal.active {\n\tdisplay: flex;\n\tflex-direction: column;\n\topacity: 100%;\n\tpointer-events: all;\n}\n\n.modal-container .create-task-modal .top {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tgap: 10rem;\n}\n\n.modal-container .create-task-modal .top button {\n\tborder: none;\n\ttext-align: center;\n\tcolor: var(--text-color);\n\tfont-weight: bold;\n\tbackground-color: transparent;\n\tfont-size: 100%;\n}\n\n.modal-container .create-task-modal .bottom .task-details {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\theight: 100%;\n}\n\n.modal-container .create-task-modal .bottom .task-details label {\n\tmargin-bottom: 5px;\n\tfont-weight: bold;\n}\n\n.modal-container .create-task-modal .bottom .task-details input,\n.modal-container .create-task-modal .bottom .task-details select {\n\toutline: none;\n\tborder: 1px solid var(--text-color);\n\tborder-radius: 5px;\n\tpadding: 10px;\n\tmargin-bottom: 10px;\n}\n\n.modal-container .create-task-modal .bottom .task-details button {\n\tpadding: 10px;\n\tfont-weight: bold;\n\tcolor: var(--text-color);\n\tbackground-color: transparent;\n\ttransition: color 0.3s ease-in-out;\n}\n\n.modal-container .create-task-modal .bottom .task-details button {\n\tbackground-color: var(--bg-color-secondary);\n}\n\n/* Edit project modal */\n\n.modal-container .edit-project-modal {\n\tdisplay: none;\n\tbackground-color: var(--bg-color);\n\tpadding: 10px;\n\tz-index: 10;\n\tborder: none;\n\tborder-radius: 10px;\n\tpointer-events: none;\n}\n\n.modal-container .edit-project-modal.active {\n\tdisplay: flex;\n\tflex-direction: column;\n\topacity: 100%;\n\tpointer-events: all;\n}\n\n.modal-container .edit-project-modal .top {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tgap: 10rem;\n}\n\n.modal-container .edit-project-modal .top button {\n\tborder: none;\n\ttext-align: center;\n\tcolor: var(--text-color);\n\tfont-weight: bold;\n\tbackground-color: transparent;\n\tfont-size: 100%;\n}\n\n.modal-container .edit-project-modal .bottom .edit-project-details {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\theight: 100%;\n}\n\n.modal-container .edit-project-modal .bottom .edit-project-details label {\n\tmargin-bottom: 5px;\n\tfont-weight: bold;\n}\n\n.modal-container .edit-project-modal .bottom .edit-project-details input {\n\toutline: none;\n\tborder: 1px solid var(--text-color);\n\tborder-radius: 5px;\n\tpadding: 10px;\n\tmargin-bottom: 10px;\n}\n\n.modal-container .edit-project-modal .bottom .edit-project-details button {\n\tpadding: 10px;\n\tfont-weight: bold;\n\tcolor: var(--text-color);\n\tbackground-color: transparent;\n\ttransition: color 0.3s ease-in-out;\n}\n\n.modal-container\n\t.edit-project-modal\n\t.bottom\n\t.edit-project-details\n\tbutton:hover {\n\tbackground-color: var(--bg-color-secondary);\n}\n\n/* Edit task modal */\n\n.modal-container .edit-task-modal {\n\tdisplay: none;\n\tbackground-color: var(--bg-color);\n\tpadding: 10px;\n\tz-index: 10;\n\tborder: none;\n\tborder-radius: 10px;\n\tpointer-events: none;\n}\n\n.modal-container .edit-task-modal.active {\n\tdisplay: flex;\n\tflex-direction: column;\n\topacity: 100%;\n\tpointer-events: all;\n}\n\n.modal-container .edit-task-modal .top {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tgap: 10rem;\n}\n\n.modal-container .edit-task-modal .top button {\n\tborder: none;\n\ttext-align: center;\n\tcolor: var(--text-color);\n\tfont-weight: bold;\n\tbackground-color: transparent;\n\tfont-size: 100%;\n}\n\n.modal-container .edit-task-modal .bottom .edit-task-details {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\theight: 100%;\n}\n\n.modal-container .edit-task-modal .bottom .edit-task-details label {\n\tmargin-bottom: 5px;\n\tfont-weight: bold;\n}\n\n.modal-container .edit-task-modal .bottom .edit-task-details input,\n.modal-container .edit-task-modal .bottom .edit-task-details select {\n\toutline: none;\n\tborder: 1px solid var(--text-color);\n\tborder-radius: 5px;\n\tpadding: 10px;\n\tmargin-bottom: 10px;\n}\n\n.modal-container .edit-task-modal .bottom .edit-task-details button {\n\tpadding: 10px;\n\tfont-weight: bold;\n\tcolor: var(--text-color);\n\tbackground-color: transparent;\n\ttransition: color 0.3s ease-in-out;\n}\n\n.modal-container .edit-task-modal .bottom .edit-task-details button:hover {\n\tbackground-color: var(--bg-color-secondary);\n}\n\n.content {\n\theight: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n\toverflow-x: hidden;\n}\n\n.task-view {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\tmax-height: 100%;\n\tpadding: 10px;\n\toverflow: hidden;\n}\n\n.task-view > .top {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: end;\n\tmargin-bottom: 10px;\n}\n\n.task-view > .top .left {\n\tdisplay: flex;\n\twidth: 80%;\n}\n\n.task-view > .top .left button {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tbackground-color: transparent;\n\tborder: none;\n\tborder-radius: 5px;\n\twidth: 50px;\n\tmargin-right: 10px;\n}\n\n.task-view > .top .left button:hover {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.task-view > .top .left img {\n\theight: 30px;\n\twidth: 30px;\n}\n\n.task-view > .top .left h1 {\n\tfont-weight: normal;\n}\n\n.task-view > .top .left p {\n\topacity: 70%;\n}\n\n.task-view > .top .right button {\n\tbackground-color: var(--primary-color);\n\theight: 50px;\n\twidth: 100px;\n}\n\n.task-view > .top .right button:hover {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.task-view .tasks {\n\toverflow-x: hidden;\n\toverflow-y: scroll;\n\tscrollbar-width: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex: 1;\n\theight: 100%;\n\twidth: 100%;\n}\n\n.task-view .tasks .task-container {\n\tmax-width: auto;\n\tmax-height: auto;\n\tpadding: 15px 10px;\n\tmargin-bottom: 10px;\n\tmargin-right: 5px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: center;\n\tbackground-color: var(--bg-color-secondary);\n\tborder-radius: 10px;\n\tcursor: pointer;\n\tpointer-events: all;\n}\n\n.task-view .tasks .task-container .seperator {\n\tmargin: 0 3rem;\n}\n\n.task-view .tasks .task-container img {\n\theight: 20px;\n}\n\n.task-view .tasks .task-container:hover {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.task-view .tasks .task-container:has(input:hover),\n.task-view .tasks .task-container:has(select:hover),\n.task-view .tasks .task-container:has(button:hover) {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.task-view .tasks .task-container .left {\n\twidth: 100%;\n}\n\n.task-view .tasks .task-container .left .top {\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tjustify-content: space-between;\n}\n\n.task-view .tasks .task-container .left .top .left h3 {\n\tfont-weight: normal;\n}\n\n.task-view .tasks .task-container.active {\n\tbackground-color: var(--bg-color-accent);\n}\n\n.task-view .tasks .task-container.active .left .top .left h3 {\n\tfont-weight: bold;\n}\n\n.task-view .tasks .task-container .left .bottom p {\n\topacity: 70%;\n\tmax-width: 100%;\n\tdisplay: -webkit-box;\n\t-webkit-line-clamp: 1;\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;\n}\n\n.task-view .tasks .task-container.active .left .bottom p {\n\topacity: 100%;\n\t-webkit-line-clamp: unset;\n\toverflow: unset;\n}\n\n.task-view .tasks .task-container .left .top .right input[type='checkbox'] {\n\twidth: 20px;\n\theight: 20px;\n\tcursor: pointer;\n}\n.task-view .tasks .task-container > .right {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\talign-items: center;\n\tgap: 10px;\n\ttext-align: center;\n\twidth: 100%;\n}\n\n.task-view .tasks .task-container > .right .wrapper {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 1rem;\n}\n\n.task-view .tasks .task-container > .right .wrapper label {\n\tfont-weight: bold;\n}\n\n.task-view .tasks .task-container > .right .action-buttons {\n\tdisplay: flex;\n\tgap: 1rem;\n}\n\n.task-view .tasks .task-container > .right .action-buttons #delete-task,\n.task-view .tasks .task-container > .right .action-buttons #edit-task {\n\tbackground-color: transparent;\n\tborder: none;\n}\n\n.task-view .tasks .task-container > .right .action-buttons #delete-task:hover,\n.task-view .tasks .task-container > .right .action-buttons #edit-task:hover {\n\tbackground-color: var(--bg-color);\n}\n\n.footer {\n\theight: auto;\n\tpadding: 10px 0;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tbackground-color: var(--bg-color-secondary);\n}\n\n.footer .left,\n.footer .middle,\n.footer .right {\n\twidth: 100%;\n}\n\n.footer .middle {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.footer #toggle-theme {\n\tfill: var(--bg-color);\n}\n\n.footer button {\n\tborder: none;\n\tbackground-color: transparent;\n}\n\n.footer img {\n\tmargin: 0 10px;\n\theight: 30px;\n}\n\n.icon {\n\tfilter: var(--filter);\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.css\"],\"names\":[],\"mappings\":\"AAAA;CACC,mBAAmB;CACnB,6BAA6B;CAC7B,0BAA0B;CAC1B,qBAAqB;;CAErB;gCAC+B;;CAE/B;wCACuC;;CAEvC,sBAAsB;AACvB;;AAEA;CACC,mBAAmB;CACnB,6BAA6B;CAC7B,0BAA0B;CAC1B,qBAAqB;;CAErB;iCACgC;AACjC;;AAEA;CACC,UAAU;AACX;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC,gBAAgB;CAChB,eAAe;AAChB;;AAEA;CACC,SAAS;CACT,UAAU;CACV,sBAAsB;AACvB;;AAEA;CACC,wBAAwB;CACxB,eAAe;CACf;qEACoE;CACpE,mBAAmB;;CAEnB,mCAAmC;AACpC;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,eAAe;CACf,YAAY;CACZ,wBAAwB;CACxB,wBAAwB;CACxB,mCAAmC;CACnC,kBAAkB;CAClB,8CAA8C;AAC/C;;AAEA;CACC,mCAAmC;CACnC,YAAY;CACZ,WAAW;CACX,WAAW;CACX,cAAc;AACf;;AAEA;CACC,mCAAmC;CACnC,UAAU;CACV,cAAc;AACf;;AAEA;CACC,aAAa;CACb,WAAW;CACX,aAAa;CACb;;mBAEkB;CAClB,8BAA8B;CAC9B,iCAAiC;AAClC;;AAEA;CACC,aAAa;AACd;;AAEA;CACC,8BAA8B;CAC9B,0BAA0B;AAC3B;;AAEA;CACC,aAAa;AACd;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,8BAA8B;CAC9B,kBAAkB;CAClB,YAAY;CACZ,2BAA2B;CAC3B,YAAY;CACZ,WAAW;CACX,YAAY;CACZ,mBAAmB;CACnB,2CAA2C;CAC3C,gBAAgB;AACjB;;AAEA;CACC,aAAa;AACd;;AAEA;CACC,aAAa;CACb,gBAAgB;AACjB;;AAEA;CACC,aAAa;CACb,8BAA8B;CAC9B,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,6BAA6B;CAC7B,YAAY;CACZ,kBAAkB;AACnB;;AAEA;CACC,wCAAwC;AACzC;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,cAAc;CACd,oBAAoB;CACpB,gBAAgB;CAChB,aAAa;CACb,sBAAsB;CACtB,QAAQ;CACR,eAAe;CACf,OAAO;AACR;;AAEA;CACC,eAAe;CACf,kBAAkB;CAClB,mBAAmB;CACnB,iBAAiB;CACjB,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,mBAAmB;CACnB,WAAW;CACX,2CAA2C;CAC3C,mBAAmB;CACnB,eAAe;AAChB;;AAEA;CACC,wCAAwC;AACzC;;AAEA;CACC,iBAAiB;CACjB,wCAAwC;AACzC;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,WAAW;AACZ;;AAEA;CACC,eAAe;CACf,oBAAoB;CACpB,qBAAqB;CACrB,4BAA4B;CAC5B,gBAAgB;AACjB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,QAAQ;AACT;;AAEA;;CAEC,6BAA6B;CAC7B,YAAY;AACb;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,iCAAiC;AAClC;;AAEA;CACC,2CAA2C;AAC5C;;AAEA;CACC,iCAAiC;AAClC;;AAEA;CACC,2CAA2C;AAC5C;;AAEA;CACC,WAAW;CACX,aAAa;CACb,yBAAyB;AAC1B;;AAEA;CACC,iCAAiC;CACjC,kBAAkB;CAClB,iCAAiC;CACjC,gBAAgB;AACjB;;AAEA;CACC,wCAAwC;CACxC,wBAAwB;CACxB,UAAU;AACX;;AAEA;CACC,UAAU;CACV,aAAa;CACb,sBAAsB;CACtB,mBAAmB;CACnB,uBAAuB;CACvB,oBAAoB;CACpB,eAAe;CACf,MAAM;CACN,QAAQ;CACR,SAAS;CACT,OAAO;CACP,oCAAoC;CACpC,6BAA6B;AAC9B;;AAEA;CACC,aAAa;CACb,mBAAmB;AACpB;;AAEA,yBAAyB;;AAEzB;CACC,aAAa;CACb,iCAAiC;CACjC,aAAa;CACb,WAAW;CACX,YAAY;CACZ,mBAAmB;CACnB,oBAAoB;AACrB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,UAAU;AACX;;AAEA;CACC,YAAY;CACZ,kBAAkB;CAClB,wBAAwB;CACxB,iBAAiB;CACjB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,YAAY;AACb;;AAEA;CACC,kBAAkB;CAClB,iBAAiB;AAClB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,kBAAkB;CAClB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,iBAAiB;CACjB,wBAAwB;CACxB,6BAA6B;CAC7B,kCAAkC;AACnC;;AAEA;CACC,2CAA2C;AAC5C;;AAEA,sBAAsB;;AAEtB;CACC,aAAa;CACb,iCAAiC;CACjC,aAAa;CACb,WAAW;CACX,YAAY;CACZ,mBAAmB;CACnB,oBAAoB;AACrB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,UAAU;AACX;;AAEA;CACC,YAAY;CACZ,kBAAkB;CAClB,wBAAwB;CACxB,iBAAiB;CACjB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,YAAY;AACb;;AAEA;CACC,kBAAkB;CAClB,iBAAiB;AAClB;;AAEA;;CAEC,aAAa;CACb,mCAAmC;CACnC,kBAAkB;CAClB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,iBAAiB;CACjB,wBAAwB;CACxB,6BAA6B;CAC7B,kCAAkC;AACnC;;AAEA;CACC,2CAA2C;AAC5C;;AAEA,uBAAuB;;AAEvB;CACC,aAAa;CACb,iCAAiC;CACjC,aAAa;CACb,WAAW;CACX,YAAY;CACZ,mBAAmB;CACnB,oBAAoB;AACrB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,UAAU;AACX;;AAEA;CACC,YAAY;CACZ,kBAAkB;CAClB,wBAAwB;CACxB,iBAAiB;CACjB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,YAAY;AACb;;AAEA;CACC,kBAAkB;CAClB,iBAAiB;AAClB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,kBAAkB;CAClB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,iBAAiB;CACjB,wBAAwB;CACxB,6BAA6B;CAC7B,kCAAkC;AACnC;;AAEA;;;;;CAKC,2CAA2C;AAC5C;;AAEA,oBAAoB;;AAEpB;CACC,aAAa;CACb,iCAAiC;CACjC,aAAa;CACb,WAAW;CACX,YAAY;CACZ,mBAAmB;CACnB,oBAAoB;AACrB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,UAAU;AACX;;AAEA;CACC,YAAY;CACZ,kBAAkB;CAClB,wBAAwB;CACxB,iBAAiB;CACjB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,YAAY;AACb;;AAEA;CACC,kBAAkB;CAClB,iBAAiB;AAClB;;AAEA;;CAEC,aAAa;CACb,mCAAmC;CACnC,kBAAkB;CAClB,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,iBAAiB;CACjB,wBAAwB;CACxB,6BAA6B;CAC7B,kCAAkC;AACnC;;AAEA;CACC,2CAA2C;AAC5C;;AAEA;CACC,aAAa;CACb,aAAa;CACb,sBAAsB;CACtB,8BAA8B;CAC9B,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,gBAAgB;CAChB,aAAa;CACb,gBAAgB;AACjB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,gBAAgB;CAChB,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,UAAU;AACX;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,6BAA6B;CAC7B,YAAY;CACZ,kBAAkB;CAClB,WAAW;CACX,kBAAkB;AACnB;;AAEA;CACC,wCAAwC;AACzC;;AAEA;CACC,YAAY;CACZ,WAAW;AACZ;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,sCAAsC;CACtC,YAAY;CACZ,YAAY;AACb;;AAEA;CACC,wCAAwC;AACzC;;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,oBAAoB;CACpB,aAAa;CACb,sBAAsB;CACtB,OAAO;CACP,YAAY;CACZ,WAAW;AACZ;;AAEA;CACC,eAAe;CACf,gBAAgB;CAChB,kBAAkB;CAClB,mBAAmB;CACnB,iBAAiB;CACjB,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,mBAAmB;CACnB,2CAA2C;CAC3C,mBAAmB;CACnB,eAAe;CACf,mBAAmB;AACpB;;AAEA;CACC,cAAc;AACf;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,wCAAwC;AACzC;;AAEA;;;CAGC,wCAAwC;AACzC;;AAEA;CACC,WAAW;AACZ;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,mBAAmB;CACnB,8BAA8B;AAC/B;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,wCAAwC;AACzC;;AAEA;CACC,iBAAiB;AAClB;;AAEA;CACC,YAAY;CACZ,eAAe;CACf,oBAAoB;CACpB,qBAAqB;CACrB,4BAA4B;CAC5B,gBAAgB;AACjB;;AAEA;CACC,aAAa;CACb,yBAAyB;CACzB,eAAe;AAChB;;AAEA;CACC,WAAW;CACX,YAAY;CACZ,eAAe;AAChB;AACA;CACC,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,mBAAmB;CACnB,SAAS;CACT,kBAAkB;CAClB,WAAW;AACZ;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,SAAS;AACV;;AAEA;CACC,iBAAiB;AAClB;;AAEA;CACC,aAAa;CACb,SAAS;AACV;;AAEA;;CAEC,6BAA6B;CAC7B,YAAY;AACb;;AAEA;;CAEC,iCAAiC;AAClC;;AAEA;CACC,YAAY;CACZ,eAAe;CACf,aAAa;CACb,mBAAmB;CACnB,8BAA8B;CAC9B,2CAA2C;AAC5C;;AAEA;;;CAGC,WAAW;AACZ;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;AACxB;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,YAAY;CACZ,6BAA6B;AAC9B;;AAEA;CACC,cAAc;CACd,YAAY;AACb;;AAEA;CACC,qBAAqB;AACtB\",\"sourcesContent\":[\":root {\\n\\t--bg-color: #ffffff;\\n\\t--bg-color-secondary: #fafafa;\\n\\t--bg-color-accent: #e7e7e7;\\n\\t--text-color: #000000;\\n\\n\\t--filter: invert(0%) sepia(8%) saturate(7469%) hue-rotate(355deg)\\n\\t\\tbrightness(90%) contrast(110%);\\n\\n\\t--font: sans-serif, 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\\n\\t\\t'Lucida Sans Unicode', Geneva, Verdana;\\n\\n\\t--sidebar-width: 300px;\\n}\\n\\n.dark-theme {\\n\\t--bg-color: #1e1d1f;\\n\\t--bg-color-secondary: #292929;\\n\\t--bg-color-accent: #383838;\\n\\t--text-color: #ffffff;\\n\\n\\t--filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(288deg)\\n\\t\\tbrightness(102%) contrast(102%);\\n}\\n\\n::-webkit-scrollbar {\\n\\twidth: 5px;\\n}\\n\\n::-webkit-scrollbar-track {\\n\\tbackground: #f1f1f1;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n\\tbackground: #888;\\n}\\n\\n::-webkit-scrollbar-thumb:hover {\\n\\tbackground: #555;\\n\\tcursor: pointer;\\n}\\n\\n* {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tbox-sizing: border-box;\\n}\\n\\nbody {\\n\\tcolor: var(--text-color);\\n\\tfont-size: 1rem;\\n\\tfont-family: sans-serif, 'Lucida Sans', 'Lucida Sans Regular',\\n\\t\\t'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\\n\\tfont-weight: normal;\\n\\n\\ttransition: color 500ms ease-in-out;\\n}\\n\\nh1 {\\n\\tfont-size: 2rem;\\n}\\n\\nbutton {\\n\\tcursor: pointer;\\n\\tpadding: 5px;\\n\\tcolor: var(--text-color);\\n\\tfont-family: var(--font);\\n\\tborder: 1px solid var(--text-color);\\n\\tborder-radius: 5px;\\n\\ttransition: background-color 100ms ease-in-out;\\n}\\n\\n.breaker {\\n\\tbackground-color: var(--text-color);\\n\\topacity: 30%;\\n\\twidth: auto;\\n\\theight: 2px;\\n\\tmargin: 10px 0;\\n}\\n\\n.seperator {\\n\\tborder: 1px solid var(--text-color);\\n\\twidth: 5px;\\n\\tmargin: 0 10px;\\n}\\n\\n.container {\\n\\theight: 100vh;\\n\\twidth: 100%;\\n\\tdisplay: grid;\\n\\tgrid-template-areas:\\n\\t\\t'sidebar content'\\n\\t\\t'sidebar content';\\n\\tgrid-template-columns: 1fr 4fr;\\n\\tbackground-color: var(--bg-color);\\n}\\n\\n.container .content #sidebar-collapse {\\n\\tdisplay: none;\\n}\\n\\n.container.expand-content {\\n\\tgrid-template-areas: 'content';\\n\\tgrid-template-columns: 1fr;\\n}\\n\\n.container.expand-content #sidebar-collapse {\\n\\tdisplay: flex;\\n}\\n\\n.sidebar {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tjustify-content: space-between;\\n\\tgrid-area: sidebar;\\n\\theight: auto;\\n\\twidth: var(--sidebar-width);\\n\\tpadding: 5px;\\n\\tmargin: 5px;\\n\\tborder: none;\\n\\tborder-radius: 10px;\\n\\tbackground-color: var(--bg-color-secondary);\\n\\toverflow: hidden;\\n}\\n\\n.sidebar.collapse {\\n\\tdisplay: none;\\n}\\n\\n.sidebar .top {\\n\\tpadding: 10px;\\n\\toverflow: hidden;\\n}\\n\\n.sidebar .top .heading {\\n\\tdisplay: flex;\\n\\tjustify-content: space-between;\\n\\talign-items: center;\\n}\\n\\n.sidebar .top .heading button {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n\\tbackground-color: transparent;\\n\\tborder: none;\\n\\tborder-radius: 5px;\\n}\\n\\n.sidebar .top .heading button:hover {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.sidebar .top .heading img {\\n\\theight: 30px;\\n}\\n\\n.sidebar .top .projects {\\n\\toverflow-y: scroll;\\n\\toverflow-x: hidden;\\n\\toverflow: auto;\\n\\tscrollbar-width: 5px;\\n\\tmax-height: 100%;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tgap: 5px;\\n\\tmax-width: auto;\\n\\tflex: 1;\\n}\\n\\n.sidebar .top .projects .project-container {\\n\\tmax-width: auto;\\n\\tpadding: 15px 10px;\\n\\tmargin-bottom: 10px;\\n\\tmargin-right: 5px;\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tjustify-content: space-between;\\n\\talign-items: center;\\n\\tgap: 0.5rem;\\n\\tbackground-color: var(--bg-color-secondary);\\n\\tborder-radius: 10px;\\n\\tcursor: pointer;\\n}\\n\\n.sidebar .top .projects .project-container:has(button:hover) {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.sidebar .top .projects .project-container.active {\\n\\tfont-weight: bold;\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.sidebar .top .projects .project-container .project-icon {\\n\\theight: 20px;\\n}\\n\\n.sidebar .top .projects .project-container .left {\\n\\twidth: 100%;\\n}\\n\\n.sidebar .top .projects .project-container .left p {\\n\\tmax-width: 100%;\\n\\tdisplay: -webkit-box;\\n\\t-webkit-line-clamp: 1;\\n\\t-webkit-box-orient: vertical;\\n\\toverflow: hidden;\\n}\\n\\n.sidebar .top .projects .project-container .right {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tgap: 5px;\\n}\\n\\n.sidebar .top .projects .project-container .right #edit-project,\\n.sidebar .top .projects .project-container .right #delete-project {\\n\\tbackground-color: transparent;\\n\\tborder: none;\\n}\\n\\n.sidebar .top .projects .project-container .right img {\\n\\theight: 20px;\\n}\\n\\n.sidebar .top .projects .project-container .right #edit-project {\\n\\ttransition: all 100ms ease-in-out;\\n}\\n\\n.sidebar .top .projects .project-container .right #edit-project:hover {\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n.sidebar .top .projects .project-container .right #delete-project {\\n\\ttransition: all 100ms ease-in-out;\\n}\\n\\n.sidebar .top .projects .project-container .right #delete-project:hover {\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n.sidebar .bottom {\\n\\twidth: 100%;\\n\\tdisplay: flex;\\n\\tjustify-content: flex-end;\\n}\\n\\n.sidebar .bottom button {\\n\\tbackground-color: var(--bg-color);\\n\\tpadding: 10px 20px;\\n\\ttransition: all 100ms ease-in-out;\\n\\tmargin-top: 20px;\\n}\\n\\n.sidebar .bottom button:hover {\\n\\tbackground-color: var(--bg-color-accent);\\n\\tcolor: var(--text-color);\\n\\tscale: 1.1;\\n}\\n\\n.modal-container {\\n\\topacity: 0;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n\\tpointer-events: none;\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tbackground-color: rgba(0, 0, 0, 0.7);\\n\\ttransition: opacity 0.3s ease;\\n}\\n\\n.modal-container.active {\\n\\topacity: 100%;\\n\\tpointer-events: all;\\n}\\n\\n/* Create project modal */\\n\\n.modal-container .create-project-modal {\\n\\tdisplay: none;\\n\\tbackground-color: var(--bg-color);\\n\\tpadding: 10px;\\n\\tz-index: 10;\\n\\tborder: none;\\n\\tborder-radius: 10px;\\n\\tpointer-events: none;\\n}\\n\\n.modal-container .create-project-modal.active {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\topacity: 100%;\\n\\tpointer-events: all;\\n}\\n\\n.modal-container .create-project-modal .top {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n\\tgap: 10rem;\\n}\\n\\n.modal-container .create-project-modal .top button {\\n\\tborder: none;\\n\\ttext-align: center;\\n\\tcolor: var(--text-color);\\n\\tfont-weight: bold;\\n\\tbackground-color: transparent;\\n\\tfont-size: 100%;\\n}\\n\\n.modal-container .create-project-modal .bottom .project-details {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.modal-container .create-project-modal .bottom .project-details label {\\n\\tmargin-bottom: 5px;\\n\\tfont-weight: bold;\\n}\\n\\n.modal-container .create-project-modal .bottom .project-details input {\\n\\toutline: none;\\n\\tborder: 1px solid var(--text-color);\\n\\tborder-radius: 5px;\\n\\tpadding: 10px;\\n\\tmargin-bottom: 10px;\\n}\\n\\n.modal-container .create-project-modal .bottom .project-details button {\\n\\tpadding: 10px;\\n\\tfont-weight: bold;\\n\\tcolor: var(--text-color);\\n\\tbackground-color: transparent;\\n\\ttransition: color 0.3s ease-in-out;\\n}\\n\\n.modal-container .create-project-modal .bottom .project-details button:hover {\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n/* Create task modal */\\n\\n.modal-container .create-task-modal {\\n\\tdisplay: none;\\n\\tbackground-color: var(--bg-color);\\n\\tpadding: 10px;\\n\\tz-index: 10;\\n\\tborder: none;\\n\\tborder-radius: 10px;\\n\\tpointer-events: none;\\n}\\n\\n.modal-container .create-task-modal.active {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\topacity: 100%;\\n\\tpointer-events: all;\\n}\\n\\n.modal-container .create-task-modal .top {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n\\tgap: 10rem;\\n}\\n\\n.modal-container .create-task-modal .top button {\\n\\tborder: none;\\n\\ttext-align: center;\\n\\tcolor: var(--text-color);\\n\\tfont-weight: bold;\\n\\tbackground-color: transparent;\\n\\tfont-size: 100%;\\n}\\n\\n.modal-container .create-task-modal .bottom .task-details {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.modal-container .create-task-modal .bottom .task-details label {\\n\\tmargin-bottom: 5px;\\n\\tfont-weight: bold;\\n}\\n\\n.modal-container .create-task-modal .bottom .task-details input,\\n.modal-container .create-task-modal .bottom .task-details select {\\n\\toutline: none;\\n\\tborder: 1px solid var(--text-color);\\n\\tborder-radius: 5px;\\n\\tpadding: 10px;\\n\\tmargin-bottom: 10px;\\n}\\n\\n.modal-container .create-task-modal .bottom .task-details button {\\n\\tpadding: 10px;\\n\\tfont-weight: bold;\\n\\tcolor: var(--text-color);\\n\\tbackground-color: transparent;\\n\\ttransition: color 0.3s ease-in-out;\\n}\\n\\n.modal-container .create-task-modal .bottom .task-details button {\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n/* Edit project modal */\\n\\n.modal-container .edit-project-modal {\\n\\tdisplay: none;\\n\\tbackground-color: var(--bg-color);\\n\\tpadding: 10px;\\n\\tz-index: 10;\\n\\tborder: none;\\n\\tborder-radius: 10px;\\n\\tpointer-events: none;\\n}\\n\\n.modal-container .edit-project-modal.active {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\topacity: 100%;\\n\\tpointer-events: all;\\n}\\n\\n.modal-container .edit-project-modal .top {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n\\tgap: 10rem;\\n}\\n\\n.modal-container .edit-project-modal .top button {\\n\\tborder: none;\\n\\ttext-align: center;\\n\\tcolor: var(--text-color);\\n\\tfont-weight: bold;\\n\\tbackground-color: transparent;\\n\\tfont-size: 100%;\\n}\\n\\n.modal-container .edit-project-modal .bottom .edit-project-details {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.modal-container .edit-project-modal .bottom .edit-project-details label {\\n\\tmargin-bottom: 5px;\\n\\tfont-weight: bold;\\n}\\n\\n.modal-container .edit-project-modal .bottom .edit-project-details input {\\n\\toutline: none;\\n\\tborder: 1px solid var(--text-color);\\n\\tborder-radius: 5px;\\n\\tpadding: 10px;\\n\\tmargin-bottom: 10px;\\n}\\n\\n.modal-container .edit-project-modal .bottom .edit-project-details button {\\n\\tpadding: 10px;\\n\\tfont-weight: bold;\\n\\tcolor: var(--text-color);\\n\\tbackground-color: transparent;\\n\\ttransition: color 0.3s ease-in-out;\\n}\\n\\n.modal-container\\n\\t.edit-project-modal\\n\\t.bottom\\n\\t.edit-project-details\\n\\tbutton:hover {\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n/* Edit task modal */\\n\\n.modal-container .edit-task-modal {\\n\\tdisplay: none;\\n\\tbackground-color: var(--bg-color);\\n\\tpadding: 10px;\\n\\tz-index: 10;\\n\\tborder: none;\\n\\tborder-radius: 10px;\\n\\tpointer-events: none;\\n}\\n\\n.modal-container .edit-task-modal.active {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\topacity: 100%;\\n\\tpointer-events: all;\\n}\\n\\n.modal-container .edit-task-modal .top {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n\\tgap: 10rem;\\n}\\n\\n.modal-container .edit-task-modal .top button {\\n\\tborder: none;\\n\\ttext-align: center;\\n\\tcolor: var(--text-color);\\n\\tfont-weight: bold;\\n\\tbackground-color: transparent;\\n\\tfont-size: 100%;\\n}\\n\\n.modal-container .edit-task-modal .bottom .edit-task-details {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.modal-container .edit-task-modal .bottom .edit-task-details label {\\n\\tmargin-bottom: 5px;\\n\\tfont-weight: bold;\\n}\\n\\n.modal-container .edit-task-modal .bottom .edit-task-details input,\\n.modal-container .edit-task-modal .bottom .edit-task-details select {\\n\\toutline: none;\\n\\tborder: 1px solid var(--text-color);\\n\\tborder-radius: 5px;\\n\\tpadding: 10px;\\n\\tmargin-bottom: 10px;\\n}\\n\\n.modal-container .edit-task-modal .bottom .edit-task-details button {\\n\\tpadding: 10px;\\n\\tfont-weight: bold;\\n\\tcolor: var(--text-color);\\n\\tbackground-color: transparent;\\n\\ttransition: color 0.3s ease-in-out;\\n}\\n\\n.modal-container .edit-task-modal .bottom .edit-task-details button:hover {\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n.content {\\n\\theight: 100vh;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tjustify-content: space-between;\\n\\toverflow-x: hidden;\\n}\\n\\n.task-view {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\twidth: 100%;\\n\\tmax-height: 100%;\\n\\tpadding: 10px;\\n\\toverflow: hidden;\\n}\\n\\n.task-view > .top {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tjustify-content: space-between;\\n\\talign-items: end;\\n\\tmargin-bottom: 10px;\\n}\\n\\n.task-view > .top .left {\\n\\tdisplay: flex;\\n\\twidth: 80%;\\n}\\n\\n.task-view > .top .left button {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n\\tbackground-color: transparent;\\n\\tborder: none;\\n\\tborder-radius: 5px;\\n\\twidth: 50px;\\n\\tmargin-right: 10px;\\n}\\n\\n.task-view > .top .left button:hover {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.task-view > .top .left img {\\n\\theight: 30px;\\n\\twidth: 30px;\\n}\\n\\n.task-view > .top .left h1 {\\n\\tfont-weight: normal;\\n}\\n\\n.task-view > .top .left p {\\n\\topacity: 70%;\\n}\\n\\n.task-view > .top .right button {\\n\\tbackground-color: var(--primary-color);\\n\\theight: 50px;\\n\\twidth: 100px;\\n}\\n\\n.task-view > .top .right button:hover {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.task-view .tasks {\\n\\toverflow-x: hidden;\\n\\toverflow-y: scroll;\\n\\tscrollbar-width: 5px;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tflex: 1;\\n\\theight: 100%;\\n\\twidth: 100%;\\n}\\n\\n.task-view .tasks .task-container {\\n\\tmax-width: auto;\\n\\tmax-height: auto;\\n\\tpadding: 15px 10px;\\n\\tmargin-bottom: 10px;\\n\\tmargin-right: 5px;\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tjustify-content: space-between;\\n\\talign-items: center;\\n\\tbackground-color: var(--bg-color-secondary);\\n\\tborder-radius: 10px;\\n\\tcursor: pointer;\\n\\tpointer-events: all;\\n}\\n\\n.task-view .tasks .task-container .seperator {\\n\\tmargin: 0 3rem;\\n}\\n\\n.task-view .tasks .task-container img {\\n\\theight: 20px;\\n}\\n\\n.task-view .tasks .task-container:hover {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.task-view .tasks .task-container:has(input:hover),\\n.task-view .tasks .task-container:has(select:hover),\\n.task-view .tasks .task-container:has(button:hover) {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.task-view .tasks .task-container .left {\\n\\twidth: 100%;\\n}\\n\\n.task-view .tasks .task-container .left .top {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n}\\n\\n.task-view .tasks .task-container .left .top .left h3 {\\n\\tfont-weight: normal;\\n}\\n\\n.task-view .tasks .task-container.active {\\n\\tbackground-color: var(--bg-color-accent);\\n}\\n\\n.task-view .tasks .task-container.active .left .top .left h3 {\\n\\tfont-weight: bold;\\n}\\n\\n.task-view .tasks .task-container .left .bottom p {\\n\\topacity: 70%;\\n\\tmax-width: 100%;\\n\\tdisplay: -webkit-box;\\n\\t-webkit-line-clamp: 1;\\n\\t-webkit-box-orient: vertical;\\n\\toverflow: hidden;\\n}\\n\\n.task-view .tasks .task-container.active .left .bottom p {\\n\\topacity: 100%;\\n\\t-webkit-line-clamp: unset;\\n\\toverflow: unset;\\n}\\n\\n.task-view .tasks .task-container .left .top .right input[type='checkbox'] {\\n\\twidth: 20px;\\n\\theight: 20px;\\n\\tcursor: pointer;\\n}\\n.task-view .tasks .task-container > .right {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tjustify-content: space-between;\\n\\talign-items: center;\\n\\tgap: 10px;\\n\\ttext-align: center;\\n\\twidth: 100%;\\n}\\n\\n.task-view .tasks .task-container > .right .wrapper {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tgap: 1rem;\\n}\\n\\n.task-view .tasks .task-container > .right .wrapper label {\\n\\tfont-weight: bold;\\n}\\n\\n.task-view .tasks .task-container > .right .action-buttons {\\n\\tdisplay: flex;\\n\\tgap: 1rem;\\n}\\n\\n.task-view .tasks .task-container > .right .action-buttons #delete-task,\\n.task-view .tasks .task-container > .right .action-buttons #edit-task {\\n\\tbackground-color: transparent;\\n\\tborder: none;\\n}\\n\\n.task-view .tasks .task-container > .right .action-buttons #delete-task:hover,\\n.task-view .tasks .task-container > .right .action-buttons #edit-task:hover {\\n\\tbackground-color: var(--bg-color);\\n}\\n\\n.footer {\\n\\theight: auto;\\n\\tpadding: 10px 0;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n\\tbackground-color: var(--bg-color-secondary);\\n}\\n\\n.footer .left,\\n.footer .middle,\\n.footer .right {\\n\\twidth: 100%;\\n}\\n\\n.footer .middle {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n}\\n\\n.footer #toggle-theme {\\n\\tfill: var(--bg-color);\\n}\\n\\n.footer button {\\n\\tborder: none;\\n\\tbackground-color: transparent;\\n}\\n\\n.footer img {\\n\\tmargin: 0 10px;\\n\\theight: 30px;\\n}\\n\\n.icon {\\n\\tfilter: var(--filter);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///208\n")},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b29kdWUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9vZHVlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b29kdWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rvb2R1ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b29kdWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b29kdWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9vZHVlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9vZHVlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},342:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/style.css\nvar style = __webpack_require__(208);\n;// CONCATENATED MODULE: ./src/style.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(style/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/icons/folder.svg\nconst folder_namespaceObject = __webpack_require__.p + "554c78f85a4eec83d44e.svg";\n;// CONCATENATED MODULE: ./src/components/icons/edit.svg\nconst edit_namespaceObject = __webpack_require__.p + "9de65eb583c3d5e06897.svg";\n;// CONCATENATED MODULE: ./src/components/icons/delete.svg\nconst delete_namespaceObject = __webpack_require__.p + "e18a574bfd8620c4b710.svg";\n;// CONCATENATED MODULE: ./src/scripts/project.js\nfunction generateUUID() {\n\tconst randomId = crypto.randomUUID();\n\treturn (\n\t\t\'project-\' +\n\t\trandomId.substring(randomId.lastIndexOf(\'-\') + 1, randomId.length)\n\t);\n}\n\nclass Project {\n\tconstructor(name, description, projectId = null) {\n\t\tthis.projectId = projectId || generateUUID();\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.tasks = [];\n\t}\n\n\tremoveTask(task) {\n\t\tconst indexOfTaskToDelete = this.tasks.indexOf(task);\n\n\t\tthis.tasks.splice(indexOfTaskToDelete, 1);\n\t}\n\n\tcompleteTask(taskId) {\n\t\tconst taskToComplete = this.tasks.find(\n\t\t\t(task) => (task.taskId = taskId)\n\t\t);\n\n\t\ttaskToComplete.toggleCompletedStatus();\n\t}\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: "less than a second",\n    other: "less than {{count}} seconds",\n  },\n\n  xSeconds: {\n    one: "1 second",\n    other: "{{count}} seconds",\n  },\n\n  halfAMinute: "half a minute",\n\n  lessThanXMinutes: {\n    one: "less than a minute",\n    other: "less than {{count}} minutes",\n  },\n\n  xMinutes: {\n    one: "1 minute",\n    other: "{{count}} minutes",\n  },\n\n  aboutXHours: {\n    one: "about 1 hour",\n    other: "about {{count}} hours",\n  },\n\n  xHours: {\n    one: "1 hour",\n    other: "{{count}} hours",\n  },\n\n  xDays: {\n    one: "1 day",\n    other: "{{count}} days",\n  },\n\n  aboutXWeeks: {\n    one: "about 1 week",\n    other: "about {{count}} weeks",\n  },\n\n  xWeeks: {\n    one: "1 week",\n    other: "{{count}} weeks",\n  },\n\n  aboutXMonths: {\n    one: "about 1 month",\n    other: "about {{count}} months",\n  },\n\n  xMonths: {\n    one: "1 month",\n    other: "{{count}} months",\n  },\n\n  aboutXYears: {\n    one: "about 1 year",\n    other: "about {{count}} years",\n  },\n\n  xYears: {\n    one: "1 year",\n    other: "{{count}} years",\n  },\n\n  overXYears: {\n    one: "over 1 year",\n    other: "over {{count}} years",\n  },\n\n  almostXYears: {\n    one: "almost 1 year",\n    other: "almost {{count}} years",\n  },\n};\n\nconst formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === "string") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace("{{count}}", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return "in " + result;\n    } else {\n      return result + " ago";\n    }\n  }\n\n  return result;\n};\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\nfunction buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/en-US/_lib/formatLong.js\n\n\nconst dateFormats = {\n  full: "EEEE, MMMM do, y",\n  long: "MMMM do, y",\n  medium: "MMM d, y",\n  short: "MM/dd/yyyy",\n};\n\nconst timeFormats = {\n  full: "h:mm:ss a zzzz",\n  long: "h:mm:ss a z",\n  medium: "h:mm:ss a",\n  short: "h:mm a",\n};\n\nconst dateTimeFormats = {\n  full: "{{date}} \'at\' {{time}}",\n  long: "{{date}} \'at\' {{time}}",\n  medium: "{{date}}, {{time}}",\n  short: "{{date}}, {{time}}",\n};\n\nconst formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: "full",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: "full",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: "full",\n  }),\n};\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\nconst formatRelativeLocale = {\n  lastWeek: "\'last\' eeee \'at\' p",\n  yesterday: "\'yesterday at\' p",\n  today: "\'today at\' p",\n  tomorrow: "\'tomorrow at\' p",\n  nextWeek: "eeee \'at\' p",\n  other: "P",\n};\n\nconst formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don\'t start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : "standalone";\n\n    let valuesArray;\n    if (context === "formatting" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don\'t want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/en-US/_lib/localize.js\n\n\nconst eraValues = {\n  narrow: ["B", "A"],\n  abbreviated: ["BC", "AD"],\n  wide: ["Before Christ", "Anno Domini"],\n};\n\nconst quarterValues = {\n  narrow: ["1", "2", "3", "4"],\n  abbreviated: ["Q1", "Q2", "Q3", "Q4"],\n  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you\'re working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],\n  abbreviated: [\n    "Jan",\n    "Feb",\n    "Mar",\n    "Apr",\n    "May",\n    "Jun",\n    "Jul",\n    "Aug",\n    "Sep",\n    "Oct",\n    "Nov",\n    "Dec",\n  ],\n\n  wide: [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December",\n  ],\n};\n\nconst dayValues = {\n  narrow: ["S", "M", "T", "W", "T", "F", "S"],\n  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],\n  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  wide: [\n    "Sunday",\n    "Monday",\n    "Tuesday",\n    "Wednesday",\n    "Thursday",\n    "Friday",\n    "Saturday",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be \'year\', \'quarter\', \'month\', \'week\', \'date\', \'dayOfYear\',\n  // \'day\', \'hour\', \'minute\', \'second\'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + "st";\n      case 2:\n        return number + "nd";\n      case 3:\n        return number + "rd";\n    }\n  }\n  return number + "th";\n};\n\nconst localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: "wide",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: "wide",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: "wide",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: "wide",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: "wide",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: "wide",\n  }),\n};\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/_lib/buildMatchFn.js\nfunction buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\nfunction buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/en-US/_lib/match.js\n\n\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nconst match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: "any",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: "any",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: "any",\n  }),\n};\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/locale/en-US.js\n\n\n\n\n\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nconst enUS = {\n  code: "en-US",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\n/* harmony default export */ const en_US = ((/* unused pure expression or super */ null && (enUS)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/defaultOptions.js\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/constants.js\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from "./constants/date-fns/constants";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from "./constants/date-fns/constants";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from "./constants/date-fns/constants";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It\'s useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nconst constructFromSymbol = Symbol.for("constructDateFrom");\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/constructFrom.js\n\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from "./constructFrom/date-fns";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === "function") return date(value);\n\n  if (date && typeof date === "object" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructFrom = ((/* unused pure expression or super */ null && (constructFrom)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/toDate.js\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_toDate = ((/* unused pure expression or super */ null && (toDate)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\n\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for \'Europe/Prague\' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/normalizeDates.js\n\n\nfunction normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === "object"),\n  );\n  return dates.map(normalize);\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/startOfDay.js\n\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfDay = ((/* unused pure expression or super */ null && (startOfDay)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/differenceInCalendarDays.js\n\n\n\n\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_differenceInCalendarDays = ((/* unused pure expression or super */ null && (differenceInCalendarDays)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/startOfYear.js\n\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfYear = ((/* unused pure expression or super */ null && (startOfYear)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/getDayOfYear.js\n\n\n\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getDayOfYear = ((/* unused pure expression or super */ null && (getDayOfYear)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/startOfWeek.js\n\n\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeek = ((/* unused pure expression or super */ null && (startOfWeek)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/startOfISOWeek.js\n\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeek = ((/* unused pure expression or super */ null && (startOfISOWeek)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/getISOWeekYear.js\n\n\n\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year\'s first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeekYear = ((/* unused pure expression or super */ null && (getISOWeekYear)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/startOfISOWeekYear.js\n\n\n\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year\'s first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeekYear = ((/* unused pure expression or super */ null && (startOfISOWeekYear)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/getISOWeek.js\n\n\n\n\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeek = ((/* unused pure expression or super */ null && (getISOWeek)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/getWeekYear.js\n\n\n\n\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeekYear = ((/* unused pure expression or super */ null && (getWeekYear)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/startOfWeekYear.js\n\n\n\n\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeekYear = ((/* unused pure expression or super */ null && (startOfWeekYear)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/getWeek.js\n\n\n\n\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nfunction getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeek = ((/* unused pure expression or super */ null && (getWeek)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/addLeadingZeros.js\nfunction addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? "-" : "";\n  const output = Math.abs(number).toString().padStart(targetLength, "0");\n  return sign + output;\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/format/lightFormatters.js\n\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nconst lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return dayPeriodEnumValue.toUpperCase();\n      case "aaa":\n        return dayPeriodEnumValue;\n      case "aaaaa":\n        return dayPeriodEnumValue[0];\n      case "aaaa":\n      default:\n        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/format/formatters.js\n\n\n\n\n\n\n\n\n\nconst dayPeriodEnum = {\n  am: "am",\n  pm: "pm",\n  midnight: "midnight",\n  noon: "noon",\n  morning: "morning",\n  afternoon: "afternoon",\n  evening: "evening",\n  night: "night",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nconst formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return localize.era(era, { width: "abbreviated" });\n      // A, B\n      case "GGGGG":\n        return localize.era(era, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return localize.era(era, { width: "wide" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === "yo") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: "year" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === "YY") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === "Yo") {\n      return localize.ordinalNumber(weekYear, { unit: "year" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "Q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "QQ":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "qq":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case "M":\n      case "MM":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // J, F, ..., D\n      case "MMMMM":\n        return localize.month(month, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return localize.month(month, { width: "wide", context: "formatting" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case "L":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case "LL":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // J, F, ..., D\n      case "LLLLL":\n        return localize.month(month, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return localize.month(month, { width: "wide", context: "standalone" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === "wo") {\n      return localize.ordinalNumber(week, { unit: "week" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === "Io") {\n      return localize.ordinalNumber(isoWeek, { unit: "week" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === "do") {\n      return localize.ordinalNumber(date.getDate(), { unit: "date" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === "Do") {\n      return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "EEEEE":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "EEEEEE":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "EEEE":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case "e":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "ee":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case "eo":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "eee":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "eeeee":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "eeeeee":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "eeee":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case "c":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "cc":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case "co":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "ccc":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // T\n      case "ccccc":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // Tu\n      case "cccccc":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "standalone",\n        });\n      // Tuesday\n      case "cccc":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case "i":\n        return String(isoDayOfWeek);\n      // 02\n      case "ii":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case "io":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });\n      // Tue\n      case "iii":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "iiiii":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "iiiiii":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "iiii":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "aaa":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "aaaaa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "aaaa":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n    }\n\n    switch (token) {\n      case "b":\n      case "bb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "bbb":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "bbbbb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "bbbb":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "BBBBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "BBBB":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === "ho") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === "Ho") {\n      return localize.ordinalNumber(date.getHours(), { unit: "hour" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === "Ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === "ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === "mo") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === "so") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: "second" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `\'Z\'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return "Z";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case "X":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case "XXXX":\n      case "XX": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case "XXXXX":\n      case "XXX": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `\'+00:00\'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case "x":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case "xxxx":\n      case "xx": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case "xxxxx":\n      case "xxx": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "O":\n      case "OO":\n      case "OOO":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "OOOO":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "z":\n      case "zz":\n      case "zzz":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "zzzz":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? "-" : "+";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/format/longFormatters.js\nconst dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "P":\n      return formatLong.date({ width: "short" });\n    case "PP":\n      return formatLong.date({ width: "medium" });\n    case "PPP":\n      return formatLong.date({ width: "long" });\n    case "PPPP":\n    default:\n      return formatLong.date({ width: "full" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "p":\n      return formatLong.time({ width: "short" });\n    case "pp":\n      return formatLong.time({ width: "medium" });\n    case "ppp":\n      return formatLong.time({ width: "long" });\n    case "pppp":\n    default:\n      return formatLong.time({ width: "full" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case "P":\n      dateTimeFormat = formatLong.dateTime({ width: "short" });\n      break;\n    case "PP":\n      dateTimeFormat = formatLong.dateTime({ width: "medium" });\n      break;\n    case "PPP":\n      dateTimeFormat = formatLong.dateTime({ width: "long" });\n      break;\n    case "PPPP":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: "full" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace("{{date}}", dateLongFormatter(datePattern, formatLong))\n    .replace("{{time}}", timeLongFormatter(timePattern, formatLong));\n};\n\nconst longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/_lib/protectedTokens.js\nconst dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = ["D", "DD", "YY", "YYYY"];\n\nfunction isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nfunction isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nfunction warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === "Y" ? "years" : "days of the month";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/isDate.js\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate(\'2014-02-31\')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nfunction isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === "object" &&\n      Object.prototype.toString.call(value) === "[object Date]")\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isDate = ((/* unused pure expression or super */ null && (isDate)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/isValid.js\n\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(\'\'))\n * //=> false\n */\nfunction isValid(date) {\n  return !((!isDate(date) && typeof date !== "number") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isValid = ((/* unused pure expression or super */ null && (isValid)));\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/format.js\n\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - \'\' matches two quote characters in a row\n// - \'(\'\'|[^\'])+(\'|$) matches anything surrounded by two quote characters (\'),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\nconst escapedStringRegExp = /^\'([^]*?)\'?$/;\nconst doubleQuoteRegExp = /\'\'/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (\') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a \'real\' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as "stand-alone" units, but are different in some languages.\n *    "Formatting" units are declined according to the rules of the language\n *    in the context of a date. "Stand-alone" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), \'do LLLL\', {locale: cs}) //=> \'6. listopad\'`\n *\n *    `format(new Date(2017, 10, 6), \'do MMMM\', {locale: cs}) //=> \'6. listopadu\'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with "2" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), \'MMM\') //=> \'Nov\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMM\') //=> \'N\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMMM\') //=> \'November\'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), \'yyyyyyyy\') //=> \'00002017\'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), \'MM/dd/yyyy\')\n * //=> \'02/11/2014\'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from \'date-fns/locale/eo\'\n * const result = format(new Date(2014, 6, 2), "do \'de\' MMMM yyyy", {\n *   locale: eoLocale\n * })\n * //=> \'2-a de julio 2014\'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), "h \'o\'\'clock\'")\n * //=> "3 o\'clock"\n */\nfunction format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError("Invalid time value");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === "p" || firstCharacter === "P") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join("")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === "\'\'") {\n        return { isToken: false, value: "\'" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === "\'") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          "Format string contains an unescaped latin alphabet character `" +\n            firstCharacter +\n            "`",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join("");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, "\'");\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_format = ((/* unused pure expression or super */ null && (format)));\n\n;// CONCATENATED MODULE: ./src/scripts/task.js\n\n\nfunction task_generateUUID() {\n\treturn \'task-\' + crypto.randomUUID().substring(0, 8);\n}\n\nclass Task {\n\tconstructor(\n\t\tname,\n\t\tdescription,\n\t\tpriority,\n\t\tdueDate,\n\t\ttaskId = null,\n\t\tisComplete = false\n\t) {\n\t\tthis.taskId = taskId || task_generateUUID();\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.priority = priority;\n\t\tthis.dueDate = dueDate;\n\t\tthis.isComplete = isComplete;\n\t}\n\n\ttoggleCompletedStatus() {\n\t\tthis.isComplete = !this.isComplete;\n\t}\n\n\tgetFormattedDate() {\n\t\tconst formattedDate = format(this.dueDate, \'do, MMM, yyyy\');\n\t\tconst formattedDateArr = formattedDate.split(\',\');\n\t\tconst trimmedFormattedDateArr = formattedDateArr.map((element) => {\n\t\t\treturn element.trim();\n\t\t});\n\t\tconst dayNumber = trimmedFormattedDateArr[0];\n\t\tconst month = trimmedFormattedDateArr[1];\n\t\tconst year = trimmedFormattedDateArr[2];\n\n\t\treturn `${dayNumber} of ${month}, ${year}`;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/scripts/controller.js\n\n\n\nclass Controller {\n\tactiveProject;\n\n\tconstructor() {\n\t\tthis.projects = [];\n\t}\n\n\tcreateProject(name, description, id) {\n\t\tconst newProject = new Project(name, description, id);\n\t\tthis.setActiveProject(newProject.projectId);\n\t\tthis.projects.push(newProject);\n\t\tthis.saveToLocalStorage();\n\n\t\treturn newProject;\n\t}\n\n\teditProject(projectId, name, description) {\n\t\tconst projectToEdit = this.projects.find(\n\t\t\t(project) => project.projectId === projectId\n\t\t);\n\n\t\tprojectToEdit.name = name;\n\t\tprojectToEdit.description = description;\n\n\t\tthis.saveToLocalStorage();\n\t}\n\n\tdeleteProject(project) {\n\t\tconst indexOfProjectToDelete = this.projects.indexOf(project);\n\n\t\tthis.projects.splice(indexOfProjectToDelete, 1);\n\n\t\tthis.saveToLocalStorage();\n\n\t\t// The element at the index of the project we just deleted will contain a different project or no project, we will set this project to active after deleting\n\t\treturn indexOfProjectToDelete;\n\t}\n\n\tcreateTask(project, task) {\n\t\tconst newTask = new Task(\n\t\t\ttask.name,\n\t\t\ttask.description,\n\t\t\ttask.priority,\n\t\t\ttask.dueDate,\n\t\t\ttask.id,\n\t\t\ttask.isComplete\n\t\t);\n\n\t\tproject.tasks.push(newTask);\n\n\t\tthis.saveToLocalStorage();\n\n\t\treturn newTask;\n\t}\n\n\teditTask(taskId, name, description, priority, dueDate) {\n\t\tconst taskToEdit = this.activeProject.tasks.find(\n\t\t\t(task) => task.taskId === taskId\n\t\t);\n\n\t\ttaskToEdit.name = name;\n\t\ttaskToEdit.description = description;\n\t\ttaskToEdit.dueDate = dueDate;\n\t\ttaskToEdit.priority = priority;\n\n\t\tthis.saveToLocalStorage();\n\t}\n\n\tdeleteTask(task, project) {\n\t\tif (project) {\n\t\t\tproject.removeTask(task);\n\t\t}\n\n\t\tthis.saveToLocalStorage();\n\t}\n\n\tsetActiveProject(projectId) {\n\t\tif (!projectId) return;\n\n\t\tconst found = this.projects.find(\n\t\t\t(project) => project.projectId === projectId\n\t\t);\n\n\t\tif (found) {\n\t\t\tthis.activeProject = found;\n\t\t\tthis.saveToLocalStorage();\n\t\t} else {\n\t\t\tconsole.warn(`Project with Id ${projectId} not found!`);\n\t\t}\n\t}\n\n\tsetActiveTask(taskId) {\n\t\tthis.activeTask = this.activeProject.tasks.find(\n\t\t\t(task) => task.taskId === taskId\n\t\t);\n\t}\n\n\tsaveToLocalStorage() {\n\t\tconst data = {\n\t\t\tprojects: this.projects,\n\t\t\tactiveProjectId: this.activeProject?.projectId || null,\n\t\t};\n\n\t\tlocalStorage.setItem(\'projects-data\', JSON.stringify(data));\n\t}\n\n\tloadDataFromLocalStorage() {\n\t\tconst data = JSON.parse(localStorage.getItem(\'projects-data\')) || null;\n\n\t\tif (!data) return;\n\n\t\tthis.projects = data.projects.map((project) => {\n\t\t\tconst newProject = this.createProject(\n\t\t\t\tproject.name,\n\t\t\t\tproject.description,\n\t\t\t\tproject.projectId\n\t\t\t);\n\n\t\t\tproject.tasks.forEach((task) => this.createTask(newProject, task));\n\n\t\t\treturn newProject;\n\t\t});\n\n\t\tthis.activeProject = this.projects.find(\n\t\t\t(project) => project.projectId === data.activeProjectId\n\t\t);\n\n\t\tthis.saveToLocalStorage();\n\n\t\treturn data;\n\t}\n}\n\n;// CONCATENATED MODULE: ./src/scripts/index.js\n\n\n\n\n\n\n\n\n\nconst themeButton = document.querySelector(\'#toggle-theme\');\n\nconst modalContainer = document.querySelector(\'.modal-container\');\n\nconst projectsContainer = document.querySelector(\'.projects\');\nlet projects = document.querySelectorAll(\'.project-container\');\n\nconst newProjectButton = document.querySelector(\'#add-new-project\');\nconst projectCreateModal = document.querySelector(\'.create-project-modal\');\nconst closeProjectCreateModal = document.querySelector(\n\t\'#close-project-creation-modal\'\n);\nconst projectForm = document.querySelector(\'.project-details\');\n\nconst projectEditModal = document.querySelector(\'.edit-project-modal\');\nconst closeProjectEditModal = document.querySelector(\n\t\'#close-project-editing-modal\'\n);\n\nconst editProjectForm = document.querySelector(\'.edit-project-details\');\n\nconst tasksContainer = document.querySelector(\'.tasks\');\nlet tasks = document.querySelectorAll(\'.task-container\');\n\nconst newTaskButton = document.querySelector(\'#add-new-task\');\nconst taskCreateModal = document.querySelector(\'.create-task-modal\');\nconst closeTaskCreateModal = document.querySelector(\n\t\'#close-task-creation-modal\'\n);\nconst taskForm = document.querySelector(\'.task-details\');\n\nconst taskEditModal = document.querySelector(\'.edit-task-modal\');\nconst closeTaskEditModal = document.querySelector(\'#close-task-editting-modal\');\n\nconst editTaskForm = document.querySelector(\'.edit-task-details\');\n\nconst controller = new Controller();\n\nconst sidebar = document.querySelector(\'.sidebar\');\nconst container = document.querySelector(\'.container\');\nconst sidebarCollapseButtons = document.querySelectorAll(\'#sidebar-collapse\');\n\nsidebarCollapseButtons.forEach((button) => {\n\tbutton.addEventListener(\'click\', () => {\n\t\tsidebar.classList.toggle(\'collapse\');\n\t\tcontainer.classList.toggle(\'expand-content\');\n\t});\n});\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n\tcontroller.loadDataFromLocalStorage();\n\n\tif (controller.projects.length === 0) {\n\t\tconst demoProject = controller.createProject(\n\t\t\t\'Demo Project\',\n\t\t\t\'This is a demo project.\'\n\t\t);\n\n\t\tcontroller.createTask(\n\t\t\tdemoProject,\n\t\t\tnew Task(\'Demo Task\', \'This is a demo task.\', \'High\', \'2025-12-05\')\n\t\t);\n\n\t\t// This also updates localStorage\n\t\tprojectManager.setProjectAsActive(\n\t\t\tdemoProject,\n\t\t\tprojectManager.renderProject(demoProject)\n\t\t);\n\t} else {\n\t\tcontroller.projects.forEach((project) => {\n\t\t\tif (project === controller.activeProject) {\n\t\t\t\tprojectManager.setProjectAsActive(\n\t\t\t\t\tproject,\n\t\t\t\t\tprojectManager.renderProject(project)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tprojectManager.renderProject(project);\n\t\t\t}\n\t\t});\n\t}\n});\n\nconst themeManager = (function () {\n\tlet isDarkMode = false;\n\n\t// Load saved theme from localStorage\n\tif (localStorage.getItem(\'isDarkMode\') === \'true\') {\n\t\tisDarkMode = true;\n\t\tdocument.body.classList.add(\'dark-theme\');\n\t}\n\n\tthemeButton.addEventListener(\'click\', () => {\n\t\tisDarkMode = !isDarkMode;\n\n\t\tlocalStorage.setItem(\'isDarkMode\', isDarkMode);\n\n\t\tdocument.body.classList.toggle(\'dark-theme\');\n\t});\n})();\n\nconst ModalManager = (function () {\n\t// New Project Modal\n\tnewProjectButton.addEventListener(\'click\', () => {\n\t\tdocument.querySelector(\'#project-name-input\').value = \'\';\n\t\tdocument.querySelector(\'#project-description-input\').value = \'\';\n\n\t\tmodalContainer.classList.add(\'active\');\n\t\tprojectCreateModal.classList.add(\'active\');\n\t});\n\n\tcloseProjectCreateModal.addEventListener(\'click\', () => {\n\t\tmodalContainer.classList.remove(\'active\');\n\t\tprojectCreateModal.classList.remove(\'active\');\n\t});\n\n\t// New Task Modal\n\tdocument.querySelector(\'#task-name-input\').value = \'\';\n\tdocument.querySelector(\'#task-description-input\').value = \'\';\n\n\tnewTaskButton.addEventListener(\'click\', () => {\n\t\tmodalContainer.classList.add(\'active\');\n\t\ttaskCreateModal.classList.add(\'active\');\n\t});\n\n\tcloseTaskCreateModal.addEventListener(\'click\', () => {\n\t\tmodalContainer.classList.remove(\'active\');\n\t\ttaskCreateModal.classList.remove(\'active\');\n\t});\n\n\t// Edit Project Modal\n\tcloseProjectEditModal.addEventListener(\'click\', () => {\n\t\tmodalContainer.classList.remove(\'active\');\n\t\tprojectEditModal.classList.remove(\'active\');\n\t});\n\n\t// Edit Task Modal\n\tcloseTaskEditModal.addEventListener(\'click\', () => {\n\t\tmodalContainer.classList.remove(\'active\');\n\t\ttaskEditModal.classList.remove(\'active\');\n\t});\n})();\n\nconst taskManager = (function () {\n\tlet taskBeingEditted;\n\n\t// Creating a new Task\n\ttaskForm.addEventListener(\'submit\', (e) => {\n\t\te.preventDefault();\n\n\t\tconst taskName = document.querySelector(\'#task-name-input\').value;\n\t\tconst taskDescription = document.querySelector(\n\t\t\t\'#task-description-input\'\n\t\t).value;\n\t\tconst taskPriority = document.querySelector(\n\t\t\t\'#task-priority-input\'\n\t\t).value;\n\t\tconst taskDueDate = document.querySelector(\n\t\t\t\'#task-due-date-input\'\n\t\t).value;\n\n\t\tconst newTask = new Task(\n\t\t\ttaskName,\n\t\t\ttaskDescription,\n\t\t\ttaskPriority,\n\t\t\ttaskDueDate\n\t\t);\n\n\t\tcontroller.createTask(controller.activeProject, newTask);\n\n\t\t// display the task as active after it has been created\n\t\tsetTaskAsActive(newTask, renderTask(newTask));\n\n\t\tdocument.querySelector(\'#task-name-input\').value = \'\';\n\t\tdocument.querySelector(\'#task-description-input\').value = \'\';\n\t\tdocument.querySelector(\'#task-priority-input\').value = \'High\';\n\t\tdocument.querySelector(\'#task-due-date-input\').value = \'\';\n\n\t\tmodalContainer.classList.remove(\'active\');\n\t\ttaskCreateModal.classList.remove(\'active\');\n\t});\n\n\teditTaskForm.addEventListener(\'submit\', (e) => {\n\t\te.preventDefault();\n\n\t\tconst newTaskName = document.querySelector(\n\t\t\t\'#edit-task-name-input\'\n\t\t).value;\n\t\tconst newTaskDescription = document.querySelector(\n\t\t\t\'#edit-task-description-input\'\n\t\t).value;\n\t\tconst newTaskPriority = document.querySelector(\n\t\t\t\'#edit-task-priority-input\'\n\t\t).value;\n\t\tconst newTaskDueDate = document.querySelector(\n\t\t\t\'#edit-task-due-date-input\'\n\t\t).value;\n\n\t\tcontroller.editTask(\n\t\t\ttaskBeingEditted.taskId,\n\t\t\tnewTaskName,\n\t\t\tnewTaskDescription,\n\t\t\tnewTaskPriority,\n\t\t\tnewTaskDueDate\n\t\t);\n\n\t\tmodalContainer.classList.remove(\'active\');\n\t\ttaskEditModal.classList.remove(\'active\');\n\n\t\tdisplayEdittedChanges(\n\t\t\ttaskBeingEditted,\n\t\t\tnewTaskName,\n\t\t\tnewTaskDescription,\n\t\t\tnewTaskPriority,\n\t\t\tnewTaskDueDate\n\t\t);\n\t});\n\n\tfunction renderTask(task) {\n\t\tconst taskContainer = document.createElement(\'div\');\n\t\ttaskContainer.classList.add(\'task-container\');\n\t\ttaskContainer.id = task.taskId;\n\t\ttaskContainer.addEventListener(\'click\', () => {\n\t\t\tsetTaskAsActive(task, taskContainer);\n\t\t});\n\n\t\tconst outsideLeft = document.createElement(\'div\');\n\t\toutsideLeft.classList.add(\'left\');\n\n\t\tconst outsideLeftTop = document.createElement(\'div\');\n\t\toutsideLeftTop.classList.add(\'top\');\n\n\t\tconst outsideLeftTopLeft = document.createElement(\'div\');\n\t\toutsideLeftTopLeft.classList.add(\'left\');\n\t\tconst taskNameElement = document.createElement(\'h3\');\n\t\ttaskNameElement.innerText = task.name;\n\t\toutsideLeftTopLeft.appendChild(taskNameElement);\n\n\t\tconst outsideLeftTopRight = document.createElement(\'div\');\n\t\toutsideLeftTopRight.classList.add(\'right\');\n\n\t\tconst taskCompleteCheckbox = document.createElement(\'input\');\n\t\ttaskCompleteCheckbox.type = \'checkbox\';\n\t\ttaskCompleteCheckbox.name = \'task-complete\';\n\t\ttaskCompleteCheckbox.id = \'task-complete\';\n\t\ttaskCompleteCheckbox.classList.add(\'task-complete\');\n\t\ttaskCompleteCheckbox.checked = task.isComplete;\n\t\ttaskCompleteCheckbox.addEventListener(\'click\', (event) => {\n\t\t\tevent.stopPropagation();\n\n\t\t\tcontroller.activeProject.completeTask(task.taskId);\n\n\t\t\tcontroller.saveToLocalStorage();\n\t\t});\n\n\t\toutsideLeftTopRight.appendChild(taskCompleteCheckbox);\n\n\t\toutsideLeftTop.append(outsideLeftTopLeft, outsideLeftTopRight);\n\n\t\tconst outsideLeftBottom = document.createElement(\'div\');\n\t\toutsideLeftBottom.classList.add(\'bottom\');\n\n\t\tconst taskDescriptionElement = document.createElement(\'p\');\n\t\ttaskDescriptionElement.classList.add(\'task-description\');\n\t\ttaskDescriptionElement.innerText = task.description;\n\t\toutsideLeftBottom.appendChild(taskDescriptionElement);\n\n\t\toutsideLeft.append(outsideLeftTop, outsideLeftBottom);\n\n\t\tconst seperator = document.createElement(\'div\');\n\t\tseperator.classList.add(\'seperator\');\n\n\t\tconst outsideRight = document.createElement(\'div\');\n\t\toutsideRight.classList.add(\'right\');\n\n\t\tconst textWrapper = document.createElement(\'div\');\n\t\ttextWrapper.classList.add(\'wrapper\');\n\n\t\tconst wrapperLeft = document.createElement(\'div\');\n\t\twrapperLeft.classList.add(\'left\');\n\t\tconst taskPriorityLabel = document.createElement(\'label\');\n\t\ttaskPriorityLabel.setAttribute(\'for\', \'task-priority\');\n\t\ttaskPriorityLabel.innerText = \'Priority:\';\n\t\tconst taskPriority = document.createElement(\'p\');\n\t\ttaskPriority.name = \'priority\';\n\t\ttaskPriority.id = \'task-priority\';\n\t\ttaskPriority.innerText = task.priority;\n\t\twrapperLeft.append(taskPriorityLabel, taskPriority);\n\n\t\tconst wrapperRight = document.createElement(\'div\');\n\t\twrapperRight.classList.add(\'right\');\n\t\tconst taskDueDateLabel = document.createElement(\'label\');\n\t\ttaskDueDateLabel.setAttribute(\'for\', \' due-date\');\n\t\ttaskDueDateLabel.innerText = \'DueDate:\';\n\t\tconst taskDueDate = document.createElement(\'p\');\n\t\ttaskDueDate.id = \'due-date\';\n\t\ttaskDueDate.innerText = task.getFormattedDate();\n\t\twrapperRight.append(taskDueDateLabel, taskDueDate);\n\n\t\ttextWrapper.append(wrapperLeft, wrapperRight);\n\n\t\tconst buttons = document.createElement(\'div\');\n\t\tbuttons.classList.add(\'action-buttons\');\n\n\t\tconst editTaskButton = document.createElement(\'button\');\n\t\teditTaskButton.type = \'button\';\n\t\teditTaskButton.id = \'edit-task\';\n\n\t\tconst editTaskIcon = document.createElement(\'img\');\n\t\teditTaskIcon.classList.add(\'edit-task-icon\');\n\t\teditTaskIcon.classList.add(\'icon\');\n\t\teditTaskIcon.src = edit_namespaceObject;\n\n\t\teditTaskButton.appendChild(editTaskIcon);\n\n\t\teditTaskButton.addEventListener(\'click\', (event) => {\n\t\t\tevent.stopPropagation();\n\n\t\t\t// For tracking reasons\n\t\t\ttaskBeingEditted = task;\n\n\t\t\tdocument.querySelector(\'#edit-task-name-input\').value = task.name;\n\t\t\tdocument.querySelector(\'#edit-task-description-input\').value =\n\t\t\t\ttask.description;\n\t\t\tdocument.querySelector(\'#edit-task-priority-input\').value =\n\t\t\t\ttask.priority;\n\t\t\tdocument.querySelector(\'#edit-task-due-date-input\').value =\n\t\t\t\ttask.dueDate;\n\n\t\t\tmodalContainer.classList.add(\'active\');\n\t\t\ttaskEditModal.classList.add(\'active\');\n\t\t});\n\n\t\tconst deleteTaskButton = document.createElement(\'button\');\n\t\tdeleteTaskButton.type = \'button\';\n\t\tdeleteTaskButton.id = \'delete-task\';\n\n\t\tconst deleteTaskIcon = document.createElement(\'img\');\n\t\tdeleteTaskIcon.classList.add(\'delete-task-icon\');\n\t\tdeleteTaskIcon.classList.add(\'icon\');\n\t\tdeleteTaskIcon.src = delete_namespaceObject;\n\n\t\tdeleteTaskButton.appendChild(deleteTaskIcon);\n\n\t\tdeleteTaskButton.addEventListener(\'click\', () => {\n\t\t\tcontroller.deleteTask(task, controller.activeProject);\n\n\t\t\ttasksContainer.removeChild(taskContainer);\n\t\t});\n\n\t\tbuttons.append(editTaskButton, deleteTaskButton);\n\n\t\toutsideRight.append(textWrapper, buttons);\n\n\t\ttaskContainer.append(outsideLeft, seperator, outsideRight);\n\n\t\ttasksContainer.appendChild(taskContainer);\n\n\t\ttasks = document.querySelectorAll(\'.task-container\');\n\n\t\t// returing the project container element so we can set it as active\n\t\treturn taskContainer;\n\t}\n\n\tfunction setTaskAsActive(task, container) {\n\t\tsetAllAsInactive(tasks);\n\t\tcontroller.setActiveTask(task);\n\t\tcontainer.classList.add(\'active\');\n\t}\n\n\tfunction setAllAsInactive(taskElements) {\n\t\ttaskElements.forEach((taskElement) => {\n\t\t\ttaskElement.classList.remove(\'active\');\n\t\t});\n\t}\n\n\tfunction displayEdittedChanges(task, name, description, priority, dueDate) {\n\t\tlet NodeToEdit;\n\n\t\t// I want to only change the details of what has been editted instead of rerendering the whole projects tab\n\t\ttasks.forEach((taskElement) => {\n\t\t\tif (taskElement.id == task.taskId) {\n\t\t\t\tNodeToEdit = taskElement;\n\t\t\t}\n\t\t});\n\n\t\tNodeToEdit.querySelector(\'h3\').innerText = name;\n\t\tNodeToEdit.querySelector(\'.task-description\').innerText = description;\n\t\tNodeToEdit.querySelector(\'#task-priority\').innerText = priority;\n\t\tNodeToEdit.querySelector(\'#due-date\').innerText =\n\t\t\ttask.getFormattedDate();\n\t}\n\n\treturn { renderTask };\n})();\n\nconst projectManager = (function () {\n\tlet projectBeingEditted;\n\n\t// Creating a new project\n\tprojectForm.addEventListener(\'submit\', (e) => {\n\t\te.preventDefault();\n\n\t\tconst projectName = document.querySelector(\'#project-name-input\').value;\n\t\tconst projectDescription = document.querySelector(\n\t\t\t\'#project-description-input\'\n\t\t).value;\n\n\t\tconst newProject = controller.createProject(\n\t\t\tprojectName,\n\t\t\tprojectDescription\n\t\t);\n\n\t\t// Making the new project active and rendering it\n\t\t// \'renderProject\' returns the projects container element, that is why I have it as a callback\n\t\tsetProjectAsActive(newProject, renderProject(newProject));\n\n\t\tdocument.querySelector(\'#project-name-input\').value = \'\';\n\t\tdocument.querySelector(\'#project-description-input\').value = \'\';\n\n\t\tmodalContainer.classList.remove(\'active\');\n\t\tprojectCreateModal.classList.remove(\'active\');\n\t});\n\n\teditProjectForm.addEventListener(\'submit\', (e) => {\n\t\te.preventDefault();\n\n\t\tconst newProjectName = document.querySelector(\n\t\t\t\'#edit-project-name-input\'\n\t\t).value;\n\t\tconst newProjectDescription = document.querySelector(\n\t\t\t\'#edit-project-description-input\'\n\t\t).value;\n\n\t\tcontroller.editProject(\n\t\t\tprojectBeingEditted.projectId,\n\t\t\tnewProjectName,\n\t\t\tnewProjectDescription\n\t\t);\n\n\t\tmodalContainer.classList.remove(\'active\');\n\t\tprojectEditModal.classList.remove(\'active\');\n\n\t\tdisplayEdittedChanges(\n\t\t\tprojectBeingEditted,\n\t\t\tnewProjectName,\n\t\t\tnewProjectDescription\n\t\t);\n\t});\n\n\tfunction renderProject(project) {\n\t\tconst projectContainer = document.createElement(\'div\');\n\t\tprojectContainer.classList.add(\'project-container\');\n\t\tprojectContainer.id = project.projectId;\n\t\t// created project has to be clickable\n\t\tprojectContainer.addEventListener(\'click\', () => {\n\t\t\tsetProjectAsActive(project, projectContainer);\n\t\t});\n\n\t\tconst projectIcon = document.createElement(\'img\');\n\t\tprojectIcon.classList.add(\'project-icon\');\n\t\tprojectIcon.classList.add(\'icon\');\n\t\tprojectIcon.src = folder_namespaceObject;\n\n\t\tconst leftSide = document.createElement(\'div\');\n\t\tleftSide.classList.add(\'left\');\n\t\tconst projectNameElement = document.createElement(\'p\');\n\t\tprojectNameElement.innerText = project.name;\n\t\tleftSide.appendChild(projectNameElement);\n\n\t\tconst rightSide = document.createElement(\'div\');\n\t\trightSide.classList.add(\'right\');\n\t\tconst editButton = document.createElement(\'button\');\n\t\teditButton.id = \'edit-project\';\n\n\t\tconst editProjectIcon = document.createElement(\'img\');\n\t\teditProjectIcon.classList.add(\'edit-project-icon\');\n\t\teditProjectIcon.classList.add(\'icon\');\n\t\teditProjectIcon.src = edit_namespaceObject;\n\n\t\teditButton.appendChild(editProjectIcon);\n\n\t\teditButton.addEventListener(\'click\', (event) => {\n\t\t\tevent.stopPropagation();\n\n\t\t\t// For tracking reasons\n\t\t\tprojectBeingEditted = project;\n\n\t\t\tdocument.querySelector(\'#edit-project-name-input\').value =\n\t\t\t\tproject.name;\n\t\t\tdocument.querySelector(\'#edit-project-description-input\').value =\n\t\t\t\tproject.description;\n\n\t\t\tmodalContainer.classList.add(\'active\');\n\t\t\tprojectEditModal.classList.add(\'active\');\n\t\t});\n\n\t\tconst deleteButton = document.createElement(\'button\');\n\t\tdeleteButton.id = \'delete-project\';\n\n\t\tconst deleteProjectIcon = document.createElement(\'img\');\n\t\tdeleteProjectIcon.classList.add(\'delete-project-icon\');\n\t\tdeleteProjectIcon.classList.add(\'icon\');\n\t\tdeleteProjectIcon.src = delete_namespaceObject;\n\n\t\tdeleteButton.appendChild(deleteProjectIcon);\n\n\t\tdeleteButton.addEventListener(\'click\', (event) => {\n\t\t\tevent.stopPropagation();\n\n\t\t\t// Only allow project deleting if there is at least 1 project\n\t\t\t// We only want to set a new project as active if the project being deleted is active\n\t\t\tif (\n\t\t\t\tcontroller.projects.length > 1 &&\n\t\t\t\tproject === controller.activeProject\n\t\t\t) {\n\t\t\t\tsetNextProjectAsActive(controller.deleteProject(project));\n\n\t\t\t\tprojectsContainer.removeChild(projectContainer);\n\t\t\t} else if (controller.projects.length > 1) {\n\t\t\t\tcontroller.deleteProject(project);\n\t\t\t\tprojectsContainer.removeChild(projectContainer);\n\t\t\t} else {\n\t\t\t\talert(\'There must be at least one project\');\n\t\t\t}\n\t\t});\n\n\t\trightSide.append(editButton, deleteButton);\n\n\t\tprojectContainer.append(projectIcon, leftSide, rightSide);\n\n\t\tprojectsContainer.appendChild(projectContainer);\n\n\t\tprojects = document.querySelectorAll(\'.project-container\');\n\n\t\t// returning the project container element so we can set it as active\n\t\treturn projectContainer;\n\t}\n\n\tfunction setNextProjectAsActive(projectIndex) {\n\t\tlet nextProject = controller.projects[0];\n\n\t\t// we need to do this because if the number of projects in the array is 1, then we can only use the only project in the array as the next project\n\t\tif (\n\t\t\tcontroller.projects.length > 1 &&\n\t\t\tcontroller.projects[projectIndex] != null\n\t\t) {\n\t\t\tnextProject = controller.projects[projectIndex];\n\t\t} else if (controller.projects.length > 1) {\n\t\t\tnextProject = controller.projects[projectIndex - 1];\n\t\t}\n\n\t\tconst nextProjectContainer = document.querySelector(\n\t\t\t`#${nextProject.projectId}`\n\t\t);\n\n\t\tsetProjectAsActive(nextProject, nextProjectContainer);\n\t}\n\n\tfunction setProjectAsActive(project, container) {\n\t\tsetAllAsInactive(projects);\n\t\tcontroller.setActiveProject(project.projectId);\n\n\t\tcontainer.classList.add(\'active\');\n\n\t\tremoveTasksFromProjectDisplay();\n\t\tdisplayActiveProject(project.name, project.description);\n\n\t\t// display the tasks of the active project\n\t\tif (project.tasks.length != 0) {\n\t\t\trenderProjectTasks(project);\n\t\t}\n\t}\n\n\tfunction displayActiveProject(projectName, projectDescription) {\n\t\tconst activeProjectNameDisplay =\n\t\t\tdocument.querySelector(\'.project-title\');\n\t\tactiveProjectNameDisplay.innerText = projectName;\n\n\t\tconst activeProjectDescriptionDisplay = document.querySelector(\n\t\t\t\'.project-description\'\n\t\t);\n\t\tactiveProjectDescriptionDisplay.innerText = projectDescription;\n\t}\n\n\tfunction setAllAsInactive(projectElements) {\n\t\tprojectElements.forEach((projectElement) => {\n\t\t\tprojectElement.classList.remove(\'active\');\n\t\t});\n\t}\n\n\tfunction removeTasksFromProjectDisplay() {\n\t\tconst tasksContainer = document.querySelector(\'.tasks\');\n\n\t\twhile (tasksContainer.firstChild) {\n\t\t\ttasksContainer.firstChild.remove();\n\t\t}\n\t}\n\n\tfunction renderProjectTasks(project) {\n\t\tif (project) {\n\t\t\tproject.tasks.forEach((task) => {\n\t\t\t\ttaskManager.renderTask(task);\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction displayEdittedChanges(project, name, description) {\n\t\tlet NodeToEdit;\n\n\t\t// I want to only change the details of what has been editted instead of rerendering the whole projects tab\n\t\tprojects.forEach((projectElement) => {\n\t\t\tif (projectElement.id == project.projectId) {\n\t\t\t\tNodeToEdit = projectElement;\n\t\t\t}\n\t\t});\n\n\t\tNodeToEdit.querySelector(\'p\').innerText = name;\n\n\t\t// The details of the active project in the task view need to be updated if the project being edited is the active project\n\t\tif (project === controller.activeProject) {\n\t\t\tdisplayActiveProject(name, description);\n\t\t}\n\t}\n\n\treturn { setProjectAsActive, renderProject };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///342\n')}},__webpack_module_cache__={};function __webpack_require__(t){var n=__webpack_module_cache__[t];if(void 0!==n)return n.exports;var I=__webpack_module_cache__[t]={id:t,exports:{}};return __webpack_modules__[t](I,I.exports,__webpack_require__),I.exports}__webpack_require__.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(t,n)=>{for(var I in n)__webpack_require__.o(n,I)&&!__webpack_require__.o(t,I)&&Object.defineProperty(t,I,{enumerable:!0,get:n[I]})},__webpack_require__.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),__webpack_require__.p="/TodoListTOP/",__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(342)})();